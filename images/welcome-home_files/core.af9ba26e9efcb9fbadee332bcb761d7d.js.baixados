(function() {

    var init = function() {

        $(".header-purchase-btn a, a.primary-button-js").hover(

            function() {
            	$(this).removeClass("hoverOut").addClass("hover");
            },
            function() {
            	$(this).removeClass("hover").addClass("hoverOut");
            }

        );

    };

    $(init);

})();

(function() {

    var init = function() {

        $(window).on("load", function() {
            updateLoginLink();
            initSurvey();
        });

    };

    var updateLoginLink = function() {

        var isPrevOrStage = window.location.host.indexOf("stage") > -1 || window.location.host.indexOf("preview") > -1;
        var domain = isPrevOrStage ? "profile-stage" : "profile"

        $("a.sso-login").each(function() {

            // Get the href attribute of the login link
            const originalHref = $(this).attr('href');
            
            // Parse the URL to get the redirectUrl parameter
            const url = new URL(originalHref);
            const redirectUrl = url.searchParams.get('redirectUrl');
            
            if (redirectUrl) {
                // Parse the redirectUrl to update it
                const redirectUrlObj = new URL(decodeURIComponent(redirectUrl));

                // Add or update the "survey" parameter
                redirectUrlObj.searchParams.set('survey', 'true');

                var newUrl = "https://" + domain + ".callofduty.com/cod/login?redirectUrl=" + encodeURIComponent(redirectUrlObj.toString()) + "&promo=cer";
                $(this).attr('href', newUrl);

                // Encode and update the redirectUrl in the login link
                //url.searchParams.set('redirectUrl', encodeURIComponent(redirectUrlObj.toString()));
                //$(this).attr('href', url.toString());

            }

        });

    };

    var initSurvey = function() {

        var cookieName = "cod-survey";
        const urlParams = new URLSearchParams(window.location.search);
    	if (urlParams.get('survey') === 'true' && typeof ATVI.utils.getCookie(cookieName) == "undefined") {
            // The HTML to be injected
            const surveyHtml = `
                <div class="survey-popup">

                <div id="cod-popup-survey" class="cod-popup-survey-container">
                    <div class="survey-inner-container">
                        <div class="survey-popup-modal">
                            <div class="popup-image">
                                <button class="popup-close" aria-label="Close Survey">Ã—</button>
                            </div>
                            <div class="popup-text">
                                <p>Are you interested in taking a survey and improving <b>callofduty.com</b>?</p>
                                <ul>
                                    <li><a class="modal-yes" target="_blank" href="https://activision.az1.qualtrics.com/jfe/form/SV_0umIzsAjXNFBg6W">YES, I'LL TAKE THE SURVEY</a></li>
                                    <li><button class="modal-no">No Thanks</button></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>`;
        
            // Append the HTML before the closing </body> tag
            $('body').append(surveyHtml);

            const linkElement = document.createElement('link');
            linkElement.rel = 'stylesheet';
            linkElement.href = '/apps/atvi/callofduty/global/components/content/survey-popup/clientlibs.css';
            document.head.appendChild(linkElement);

            // Load JavaScript dynamically
            const scriptElement = document.createElement('script');
            scriptElement.src = '/apps/atvi/callofduty/global/components/content/survey-popup/clientlibs.js';
            scriptElement.type = 'text/javascript';
            document.body.appendChild(scriptElement);
        }
    };

    //$(init);

})();



// agegate

ATVI.components.agegateEditorial = {};
(function ($, ATVI) {

    var init = function () {
        agegate.agegateKeyEventHandler();
    }

    var agegate = ATVI.components.agegateEditorial;

    var registry = ATVI.utils.createRegistry();

    agegate.expireTime = 2 * 60 * 60 * 1000;

    agegate.getContext = function ($el) {
        return registry.get($el);
    };

    agegate.purgeContext = function ($el) {
        return registry.purge($el);
    };

    agegate.purgeAllContexts = function () {
        registry.purgeAll();
    };

    agegate.register = function ($el, config) {
        var context = registry.get($el);
        if (context) return context;
        var reg = registry.register($el);
        context = reg.context;
        var w = reg.$el;
        context.wrapper = w;
        context.config = config;
        context.callbacks = [];
        context.failureCallbacks = [];
        context.form = w.find(".form");
        context.fields = w.find(".fields");
        context.day = w.find(".day-input");
        context.month = w.find(".month-input");
        context.year = w.find(".year-input");
        context.feedback = w.find(".feedback-message");
        context.invalidMessage = w.find(".invalid-date");
        context.failureMessage = w.find(".failure");
        context.ageVerified = false;

        var years = Math.floor(config.minimumAge);
        var days = (config.minimumAge - years) * 365;
        var date = new Date(new Date().getTime() - days * 1000 * 60 * 60 * 24);
        date.setYear(date.getFullYear() - years);
        context.minDate = date;

        context.verifyAge = function () {
            return verifyAge(context);
        };

        context.button = w.find('.cod-editorial-agegate-submit-button').on('click keypress', function (e) {
            if (e.keyCode && e.keyCode != 13) return;
            var result = agegate.attemptVerification(context);
            if (result != 'success' || !context.successUrl) e.preventDefault();
            if (result == 'success') {
                if (context.autoplay) {
                    setTimeout(function () {
                        agegate.playAutoPlayVideo(context);
                    }, 350);
                }
            }
        });

        context.reposition = function () {
            agegate.reposition(context);
        };

        $(function () {
            context.form.css("opacity", 0);
            setTimeout(function () {
                context.form.fadeTo(300, 1);
                context.reposition();
            }, 100);
        });
        $(window).resize(context.reposition);

        return context;
    };

    agegate.engage = function ($el, opts) {
        var context = registry.get($el);
        if (opts.callback) context.callbacks.push(opts.callback);
        if (opts.failure) context.failureCallbacks.push(opts.failure);
        if (opts.successUrl) {
            context.button.attr("href", opts.successUrl).attr("target", "_blank");
            context.successUrl = opts.successUrl;
        }
        if (opts.autoplay) context.autoplay = true;

        if (context.config.disabled || ATVI.browser.isBot) {
            agegate.agegateMet(context);
            return;
        }

        agegate.tryFromCookie(context, true);
    };

    agegate.tryFromCookie = function (context, hideImmediately) {
        var cookie = (ATVI.utils.getCookies(true).agegate || "");
        var stripped = cookie.replace(/(^\"+)|(\"+$)/g, "");
        if (stripped) {
            var date = new Date(stripped);
            if (date.getTime() <= context.minDate.getTime()) {
                if (hideImmediately) context.wrapper.hide();
                agegate.agegateMet(context);
            } else {
                context.fields.hide();
                agegate.agegateFailed(context);
            }
        }
    };

    agegate.attemptVerification = function (context) {
        if (context.alreadyFailed) return "failure";
        var result = agegate.verifyAge(context);
        switch (result) {
            case "success":
                agegate.agegateMet(context);
                agegate.tryAllExcept(context);
                break;
            case "failure":
                context.alreadyFailed = true;
                agegate.agegateFailed(context);
                agegate.tryAllExcept(context);
                break;
            case "invalid":
                context.invalidMessage.show();
                context.failureMessage.hide();
                context.feedback.slideDown();
                break;
        }

        return result;
    };

    agegate.verifyAge = function (context) {
        var d = context.day.val();
        var m = context.month.val();
        var y = context.year.val();

        var date = new Date();
        m = safeParseInt(m);
        if (!m || m < 1 || m > 12) return "invalid";

        y = safeParseInt(y);
        if (!y || y < 1900 || y > date.getFullYear()) return "invalid";

        date.setMonth(m - 1);
        date.setYear(y);

        d = safeParseInt(d);
        if (!d || d < 1 || d > getDaysInMonth(date)) return "invalid";
        date.setDate(d);
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);

        ATVI.utils.setCookie("agegate", date.toUTCString(), {
            expireDate: agegate.expireTime
        });

        return context.minDate.getTime() >= date.getTime() ? "success" : "failure";
    };

    var getDaysInMonth = function (date) {
        return new Date(date.getYear(), date.getMonth() + 1, 0).getDate();
    };

    var safeParseInt = function (t) {
        try {
            return parseInt(t);
        } catch (e) { }
    };

    agegate.tryAllExcept = function (context) {
        agegate.doAllExcept(context, agegate.tryFromCookie);
    };

    agegate.doAllExcept = function (context, func) {
        var s = registry.store;
        for (var c in s) {
            if (!s.hasOwnProperty(c) || s[c] == context) continue;
            func(s[c]);
        }
    };

    agegate.agegateMet = function (context) {
        context.status = "success";
        context.ageVerified = true;
        context.wrapper.fadeTo(300, 0, function () {
            context.wrapper.hide();
        });
        var arr = context.callbacks;
        while (arr.length) {
            arr.shift()(context);
        }
    };

    agegate.agegateFailed = function (context) {
        context.status = "failed";
        context.button.fadeOut(200);
        context.feedback.slideDown();
        context.invalidMessage.hide();
        context.failureMessage.show();
        var arr = context.failureCallbacks;
        while (arr.length) {
            arr.shift()(context);
        }
    };

    agegate.reposition = function (context) {
        var ho = context.wrapper.height();
        var hi = context.form.height();
        context.form.css("top", Math.max((ho - hi) * .5, 0));
    };

    agegate.repositionAll = function () {
        var s = registry.store;
        for (var id in s) {
            if (!s.hasOwnProperty(id)) continue;
            agegate.reposition(s[id]);
        }
    };

    agegate.agegateKeyEventHandler = function () {

        var $inputs = $('.cod-editorial-agegate input.field');

        $inputs.each(function () {
            var $thisInput = $(this),
                maxLen = parseInt($thisInput.attr('maxlength'), 10);
            $thisInput.on({
                'focus': function () {
                    if (!$thisInput.val()) $thisInput.val('');
                },
                'keyup': function () {
                    if ($thisInput.val().length >= maxLen) selectNextEl($inputs, $thisInput);
                }
            });
        });

    };

    var selectNextEl = function ($collection, $el) {
        var $submitButton = $collection.parents('.cod-editorial-agegate').find('.submit');
        if ($el.is($collection.eq($collection.length - 1))) $submitButton.focus();
        else $collection[$collection.index($el) + 1].select();
    };

    agegate.getParentVideo = function (context) {
        var obj = {};
        obj.$el = context.wrapper.parents('.atvi-video-component'); //$el will exist if we're using just the atvi video component
        if (obj.$el.length == 0) {
            obj.$el = context.wrapper.closest(".modal-content").find(".atvi-video-component"); //look for video in atvi video component or in atvi cta modal
        }
        obj.context = (obj.$el.length > 0) ? ATVI.components.video.getContext(obj.$el) : {};
        return obj;
    };

    agegate.stopAutoPlayVideo = function (context) {
        var videoObj = {};
        videoObj.$el = context.wrapper.parents('.editorial-video-component').children('video');
        if(videoObj.$el.length > 0) {
            videoObj.$el[0].pause();
        }
        else {
            videoObj = agegate.getParentVideo(context);
            if(videoObj.content != null) videoObj.context.pause();
        }
    };

    agegate.playAutoPlayVideo = function (context) {
        var videoObj = {};
        videoObj.$el = context.wrapper.parents('.editorial-video-component').children('video');
        if(videoObj.$el.length > 0) {
            videoObj.$el[0].play();
        }
        else {
            videoObj = agegate.getParentVideo(context);
            if(videoObj.content != null) videoObj.context.play();
        }
    };


    $(init);

})(jQuery, ATVI);

